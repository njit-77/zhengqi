    if True:
        X_train, X_test, Y_train, Y_test = train_test_split(train_data_x, train_data_y, test_size=0.2, random_state=40)
        model_gbr = GradientBoostingRegressor()  # 建立GradientBoostingRegressor回归对象
        if True:
            parameters = {'learning_rate': [0.001, 0.003, 0.01, 0.03, 0.1, 0.3, 1],
                          'loss': ['ls', 'lad', 'huber', 'quantile'],
                          'max_depth': [1, 3, 9, 12, 15, 18, 21],
                          'max_features': ['sqrt'],
                          'min_samples_leaf': [2, 4, 6, 8, 10, 12, 14],
                          'min_samples_split': [10, 20, 30, 40, 50, 60, 70],
                          'n_estimators': [100, 200, 300, 400, 500, 600, 700],
                          'random_state': [10, 20, 30, 40, 50, 60, 70],
                          'subsample': [0.1, 0.3, 0.6, 0.9],
                          'alpha': [0.1, 0.3]}  # 定义要优化的参数信息            
            model_gs = GridSearchCV(estimator=model_gbr, param_grid=parameters, cv=5)  # 建立交叉检验模型对象
            model_gs.fit(X_train, Y_train)  # 训练交叉检验模型
            print('Best score is:', model_gs.best_score_)  # 获得交叉检验模型得出的最优得分
            print('Best parameter is:', model_gs.best_params_)  # 获得交叉检验模型得出的最优参数

            model_best = model_gs.best_estimator_  # 获得交叉检验模型得出的最优模型对象
            model_best.fit(X_train, Y_train)  # 训练最优模型
            Y_pred = model_best.predict(X_test)
            print(mean_squared_error(Y_test, Y_pred))
			
			
            parameters = {'learning_rate': [0.001, 0.003, 0.01],
                          'loss': ['ls', 'lad'],
                          'max_depth': [1, 3, 9],
                          'max_features': ['sqrt'],
                          'min_samples_leaf': [2, 4, 6, 8],
                          'min_samples_split': [10, 20, 30, 40],
                          'n_estimators': [100, 200, 300, 400],
                          'random_state': [10, 20, 30, 40],
                          'subsample': [0.1, 0.3],
                          'alpha': [0.1, 0.3]}  # 定义要优化的参数信息

Best score is: 0.8758612819529363
Best parameter is: {'alpha': 0.1, 'learning_rate': 0.01, 'loss': 'ls', 'max_depth': 9, 'max_features': 'sqrt', 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 400, 'random_state': 30, 'subsample': 0.3}
0.09495434772628068